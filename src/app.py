import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
import json
import os
import time
from datetime import datetime, timedelta
import sys
import threading

# –î–æ–±–∞–≤–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é src –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from src.data_generator import SensorDataGenerator

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏–≥–Ω–∞–ª–æ–≤",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
DATA_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), "..", "data")
REFRESH_INTERVAL = 5  # —Å–µ–∫—É–Ω–¥—ã

# –°–ª–æ–≤–∞—Ä—å —Ü–≤–µ—Ç–æ–≤ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤
STATUS_COLORS = {
    "normal": "#2ecc71",
    "warning": "#f39c12",
    "critical": "#e74c3c"
}

# –°–ª–æ–≤–∞—Ä—å —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –∏ –±–æ–ª–µ–µ –¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –¥–ª—è —Ç–∏–ø–æ–≤ –¥–∞—Ç—á–∏–∫–æ–≤
SENSOR_TYPE_NAMES = {
    "temperature": "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞",
    "humidity": "–í–ª–∞–∂–Ω–æ—Å—Ç—å",
    "pressure": "–î–∞–≤–ª–µ–Ω–∏–µ",
    "vibration": "–í–∏–±—Ä–∞—Ü–∏—è",
    "noise": "–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞",
    "power": "–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏"
}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
def get_current_data():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ—Ö –¥–∞—Ç—á–∏–∫–æ–≤"""
    current_data_path = os.path.join(DATA_PATH, "current_data.json")
    if not os.path.exists(current_data_path):
        return []
    
    try:
        with open(current_data_path, 'r') as file:
            return json.load(file)
    except (json.JSONDecodeError, FileNotFoundError):
        return []

def get_device_history(device_id, hours=1):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤"""
    now = datetime.now()
    history_data = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å (–µ—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å)
    date_list = [now.strftime('%Y%m%d')]
    if hours > 24 or now.hour < hours:
        yesterday = now - timedelta(days=1)
        date_list.append(yesterday.strftime('%Y%m%d'))
    
    for date_str in date_list:
        history_path = os.path.join(DATA_PATH, f"history_{date_str}.json")
        if os.path.exists(history_path):
            try:
                with open(history_path, 'r') as file:
                    all_history = json.load(file)
                    
                    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É –∏ –≤—Ä–µ–º–µ–Ω–∏
                    earliest_timestamp = (now - timedelta(hours=hours)).timestamp()
                    device_history = [
                        record for record in all_history 
                        if record["device_id"] == device_id and record["timestamp"] >= earliest_timestamp
                    ]
                    history_data.extend(device_history)
            except (json.JSONDecodeError, FileNotFoundError):
                pass
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    history_data.sort(key=lambda x: x["timestamp"])
    return history_data

def get_all_alerts(hours=24):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤"""
    now = datetime.now()
    alerts = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞ –Ω—É–∂–Ω—ã–µ –¥–Ω–∏
    date_list = [now.strftime('%Y%m%d')]
    if hours > 24:
        days_needed = hours // 24 + 1
        for i in range(1, days_needed):
            prev_day = now - timedelta(days=i)
            date_list.append(prev_day.strftime('%Y%m%d'))
    
    for date_str in date_list:
        history_path = os.path.join(DATA_PATH, f"history_{date_str}.json")
        if os.path.exists(history_path):
            try:
                with open(history_path, 'r') as file:
                    all_history = json.load(file)
                    
                    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É –∏ –≤—Ä–µ–º–µ–Ω–∏
                    earliest_timestamp = (now - timedelta(hours=hours)).timestamp()
                    alerts_list = [
                        record for record in all_history 
                        if record["status"] != "normal" and record["timestamp"] >= earliest_timestamp
                    ]
                    alerts.extend(alerts_list)
            except (json.JSONDecodeError, FileNotFoundError):
                pass
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
    alerts.sort(key=lambda x: x["timestamp"], reverse=True)
    return alerts

def format_timestamp(timestamp):
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ UNIX-–≤—Ä–µ–º–µ–Ω–∏ –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç"""
    return datetime.fromtimestamp(timestamp).strftime('%d.%m.%Y %H:%M:%S')

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
def create_gauge_chart(value, title, unit, min_val, max_val, threshold_warning, threshold_critical, status):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –≤ –≤–∏–¥–µ —Å–ø–∏–¥–æ–º–µ—Ç—Ä–∞"""
    color = STATUS_COLORS[status]
    
    fig = go.Figure(go.Indicator(
        mode="gauge+number",
        value=value,
        domain={'x': [0, 1], 'y': [0, 1]},
        title={'text': title, 'font': {'size': 24}},
        gauge={
            'axis': {'range': [min_val, max_val], 'tickwidth': 1, 'tickcolor': "#FFFFFF"},
            'bar': {'color': color},
            'bgcolor': "white",
            'borderwidth': 2,
            'bordercolor': "gray",
            'steps': [
                {'range': [min_val, threshold_warning[0]], 'color': 'rgba(255, 255, 0, 0.1)'},
                {'range': [threshold_warning[0], threshold_warning[1]], 'color': 'rgba(0, 255, 0, 0.3)'},
                {'range': [threshold_warning[1], max_val], 'color': 'rgba(255, 0, 0, 0.1)'}
            ],
            'threshold': {
                'line': {'color': "red", 'width': 3},
                'thickness': 0.75,
                'value': threshold_critical[1] if value < threshold_critical[1] else threshold_critical[0]
            }
        },
        number={'suffix': f" {unit}", 'font': {'size': 20, 'color': color}}
    ))
    
    fig.update_layout(
        height=250,
        margin=dict(l=20, r=20, t=50, b=20),
    )
    
    return fig

def create_time_series_chart(history_data, title, unit):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π –≤–æ –≤—Ä–µ–º–µ–Ω–∏"""
    if not history_data:
        return go.Figure()
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ DataFrame
    df = pd.DataFrame(history_data)
    df['datetime'] = pd.to_datetime(df['timestamp'], unit='s')
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å Plotly
    fig = px.line(
        df, 
        x='datetime', 
        y='value',
        title=title,
        labels={'value': f'–ó–Ω–∞—á–µ–Ω–∏–µ ({unit})', 'datetime': '–í—Ä–µ–º—è'},
        color_discrete_sequence=['#1f77b4']
    )
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–æ–∫ –¥–ª—è –∞–Ω–æ–º–∞–ª–∏–π
    warning_points = df[df['status'] == 'warning']
    critical_points = df[df['status'] == 'critical']
    
    if not warning_points.empty:
        fig.add_trace(
            go.Scatter(
                x=warning_points['datetime'],
                y=warning_points['value'],
                mode='markers',
                marker=dict(color=STATUS_COLORS['warning'], size=10, symbol='circle'),
                name='–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ'
            )
        )
    
    if not critical_points.empty:
        fig.add_trace(
            go.Scatter(
                x=critical_points['datetime'],
                y=critical_points['value'],
                mode='markers',
                marker=dict(color=STATUS_COLORS['critical'], size=12, symbol='circle-x'),
                name='–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ'
            )
        )
    
    fig.update_layout(
        height=300,
        margin=dict(l=20, r=20, t=50, b=20),
        hovermode='x unified',
        legend=dict(orientation='h', yanchor='bottom', y=1.02, xanchor='right', x=1)
    )
    
    return fig

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def init_app_state():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
    if 'generator' not in st.session_state:
        st.session_state.generator = SensorDataGenerator(data_path=DATA_PATH)
        st.session_state.generator.start()
    
    if 'alert_count' not in st.session_state:
        st.session_state.alert_count = 0
    
    if 'threshold_settings' not in st.session_state:
        st.session_state.threshold_settings = {
            "temperature": {"normal": (15.0, 30.0), "warning": (10.0, 35.0)},
            "humidity": {"normal": (30.0, 60.0), "warning": (20.0, 70.0)},
            "pressure": {"normal": (99.0, 103.0), "warning": (98.0, 104.0)},
            "vibration": {"normal": (5.0, 25.0), "warning": (2.0, 35.0)},
            "noise": {"normal": (50.0, 75.0), "warning": (45.0, 85.0)},
            "power": {"normal": (1.0, 4.0), "warning": (0.5, 5.0)}
        }

# –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞




def render_dashboard(current_data):
    """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≥–ª–∞–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    st.header("–¢–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–æ–≤")
    
    if not current_data:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å –¥–∞—Ç—á–∏–∫–æ–≤. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω.")
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ —Ç–∏–ø—É
    device_by_type = {}
    for device_data in current_data:
        sensor_type = device_data["type"]
        if sensor_type not in device_by_type:
            device_by_type[sensor_type] = []
        device_by_type[sensor_type].append(device_data)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –¥–∞—Ç—á–∏–∫–æ–≤
    tabs = st.tabs([SENSOR_TYPE_NAMES[sensor_type] for sensor_type in device_by_type.keys()])
    
    for i, (sensor_type, tab) in enumerate(zip(device_by_type.keys(), tabs)):
        with tab:
            devices = device_by_type[sensor_type]
            cols = st.columns(min(len(devices), 3))  # –ú–∞–∫—Å–∏–º—É–º 3 –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            
            for j, device in enumerate(devices):
                col_idx = j % len(cols)  # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º –∫–æ–ª–æ–Ω–∫–∞–º
                with cols[col_idx]:
                    threshold_settings = st.session_state.threshold_settings[sensor_type]
                    normal_range = threshold_settings["normal"]
                    warning_range = threshold_settings["warning"]
                    
                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∏–Ω –∏ –º–∞–∫—Å –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –¥–∞—Ç—á–∏–∫–∞
                    min_val = warning_range[0] - (warning_range[1] - warning_range[0]) * 0.2
                    max_val = warning_range[1] + (warning_range[1] - warning_range[0]) * 0.2
                    
                    fig = create_gauge_chart(
                        value=device["value"],
                        title=f"{device['device_id']}",
                        unit=device["unit"],
                        min_val=min_val,
                        max_val=max_val,
                        threshold_warning=normal_range,
                        threshold_critical=warning_range,
                        status=device["status"]
                    )
                    st.plotly_chart(fig, use_container_width=True)
                    
                    status_text = {
                        "normal": "–ù–æ—Ä–º–∞",
                        "warning": "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                        "critical": "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ"
                    }
                    
                    st.markdown(
                        f"""
                        <div style='text-align: center;'>
                            <span style='color: {STATUS_COLORS[device["status"]]}; font-weight: bold;'>
                                {status_text[device["status"]]}
                            </span>
                        </div>
                        """, 
                        unsafe_allow_html=True
                    )

def render_device_details(time_window):
    """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö"""
    st.header("–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö")
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞ –≤ —á–∞—Å—ã
    hours_mapping = {
        "–ü–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å": 1,
        "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 6 —á–∞—Å–æ–≤": 6,
        "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 12 —á–∞—Å–æ–≤": 12,
        "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞": 24,
        "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π": 24 * 7
    }
    hours = hours_mapping[time_window]
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    current_data = get_current_data()
    if not current_data:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å –¥–∞—Ç—á–∏–∫–æ–≤. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω.")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
    device_options = [f"{d['device_id']} ({SENSOR_TYPE_NAMES[d['type']]})" for d in current_data]
    selected_device_index = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", options=range(len(device_options)), format_func=lambda x: device_options[x])
    
    selected_device = current_data[selected_device_index]
    device_id = selected_device["device_id"]
    device_type = selected_device["type"]
    device_unit = selected_device["unit"]
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    history_data = get_device_history(device_id, hours)
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –ø–æ–∫–∞–∑–∞–Ω–∏–π
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric(
            label="–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", 
            value=f"{selected_device['value']} {device_unit}",
            delta=None
        )
    
    with col2:
        threshold_settings = st.session_state.threshold_settings[device_type]
        st.metric(
            label="–ù–æ—Ä–º–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω", 
            value=f"{threshold_settings['normal'][0]} - {threshold_settings['normal'][1]} {device_unit}"
        )
    
    with col3:
        last_update_time = format_timestamp(selected_device["timestamp"])
        st.metric(label="–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", value=last_update_time)
    
    # –ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π
    st.subheader(f"–ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π –∑–∞ {time_window.lower()}")
    fig = create_time_series_chart(
        history_data, 
        f"{SENSOR_TYPE_NAMES[device_type]} - {device_id}",
        device_unit
    )
    st.plotly_chart(fig, use_container_width=True)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
    st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    
    if history_data:
        df = pd.DataFrame(history_data)
        values = df['value']
        
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", f"{values.mean():.2f} {device_unit}")
        with col2:
            st.metric("–ú–∏–Ω–∏–º—É–º", f"{values.min():.2f} {device_unit}")
        with col3:
            st.metric("–ú–∞–∫—Å–∏–º—É–º", f"{values.max():.2f} {device_unit}")
        with col4:
            st.metric("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ", f"{values.std():.2f} {device_unit}")
            
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–æ–º–∞–ª–∏–π
        warnings_count = len(df[df['status'] == 'warning'])
        critical_count = len(df[df['status'] == 'critical'])
        
        col1, col2 = st.columns(2)
        with col1:
            st.metric("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è", warnings_count)
        with col2:
            st.metric("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏", critical_count)
    else:
        st.info(f"–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {device_id} –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")

def render_alerts(time_window):
    """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–ø–æ–≤–µ—â–µ–Ω–∏–π"""
    st.header("–ñ—É—Ä–Ω–∞–ª –æ–ø–æ–≤–µ—â–µ–Ω–∏–π")
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞ –≤ —á–∞—Å—ã
    hours_mapping = {
        "–ü–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å": 1,
        "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 6 —á–∞—Å–æ–≤": 6,
        "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 12 —á–∞—Å–æ–≤": 12,
        "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞": 24,
        "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π": 24 * 7
    }
    hours = hours_mapping[time_window]
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
    alerts = get_all_alerts(hours)
    
    if not alerts:
        st.success("–ù–µ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
        return
    
    # –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
    warning_count = len([a for a in alerts if a['status'] == 'warning'])
    critical_count = len([a for a in alerts if a['status'] == 'critical'])
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("–í—Å–µ–≥–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π", len(alerts))
    with col2:
        st.metric("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è", warning_count)
    with col3:
        st.metric("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ", critical_count)
    
    # –§–∏–ª—å—Ç—Ä –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
    filter_col1, filter_col2 = st.columns(2)
    with filter_col1:
        filter_status = st.multiselect(
            "–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É",
            options=["warning", "critical"],
            default=["warning", "critical"],
            format_func=lambda x: "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ" if x == "warning" else "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ"
        )
    
    with filter_col2:
        device_types = list(set([a["type"] for a in alerts]))
        filter_types = st.multiselect(
            "–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
            options=device_types,
            default=device_types,
            format_func=lambda x: SENSOR_TYPE_NAMES[x]
        )
    
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    filtered_alerts = [
        a for a in alerts 
        if a["status"] in filter_status and a["type"] in filter_types
    ]
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
    if filtered_alerts:
        alert_data = []
        for alert in filtered_alerts:
            alert_data.append({
                "–í—Ä–µ–º—è": format_timestamp(alert["timestamp"]),
                "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ": alert["device_id"],
                "–¢–∏–ø": SENSOR_TYPE_NAMES[alert["type"]],
                "–ó–Ω–∞—á–µ–Ω–∏–µ": f"{alert['value']} {alert['unit']}",
                "–°—Ç–∞—Ç—É—Å": "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ" if alert["status"] == "warning" else "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ"
            })
        
        df = pd.DataFrame(alert_data)
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –∫ —Ç–∞–±–ª–∏—Ü–µ
        def highlight_status(val):
            if val == "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ":
                return f'background-color: {STATUS_COLORS["warning"]}; color: white'
            elif val == "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ":
                return f'background-color: {STATUS_COLORS["critical"]}; color: white'
            return ''
        
        styled_df = df.style.applymap(
            highlight_status, 
            subset=['–°—Ç–∞—Ç—É—Å']
        )
        
        st.dataframe(styled_df, use_container_width=True)
    else:
        st.info("–ù–µ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º.")

def render_settings():
    """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
    
    thresholds_changed = False
    
    for sensor_type, display_name in SENSOR_TYPE_NAMES.items():
        st.subheader(display_name)
        
        current_settings = st.session_state.threshold_settings[sensor_type]
        
        col1, col2 = st.columns(2)
        with col1:
            st.markdown("**–ù–æ—Ä–º–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω**")
            normal_min, normal_max = st.slider(
                f"–ù–æ—Ä–º–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è {display_name}",
                min_value=0.0,
                max_value=150.0,
                value=(current_settings["normal"][0], current_settings["normal"][1]),
                step=0.5,
                key=f"normal_{sensor_type}"
            )
        
        with col2:
            st.markdown("**–î–∏–∞–ø–∞–∑–æ–Ω –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π**")
            warning_min, warning_max = st.slider(
                f"–î–∏–∞–ø–∞–∑–æ–Ω –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –¥–ª—è {display_name}",
                min_value=0.0,
                max_value=150.0,
                value=(current_settings["warning"][0], current_settings["warning"][1]),
                step=0.5,
                key=f"warning_{sensor_type}"
            )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        if (normal_min, normal_max) != current_settings["normal"] or (warning_min, warning_max) != current_settings["warning"]:
            st.session_state.threshold_settings[sensor_type] = {
                "normal": (normal_min, normal_max),
                "warning": (warning_min, warning_max)
            }
            thresholds_changed = True
        
        st.markdown("<hr>", unsafe_allow_html=True)
    
    if thresholds_changed:
        st.success("–ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
    
    st.subheader("–î—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    if st.button("–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ"):
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö
        for file in os.listdir(DATA_PATH):
            if file.startswith("history_"):
                file_path = os.path.join(DATA_PATH, file)
                try:
                    os.remove(file_path)
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file}: {e}")
        
        st.success("–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∞–Ω–æ–º–∞–ª–∏—è—Ö
def show_alert_notifications(current_data):
    if not current_data:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –¥–∞—Ç—á–∏–∫–æ–≤
    warning_alerts = [d for d in current_data if d["status"] == "warning"]
    critical_alerts = [d for d in current_data if d["status"] == "critical"]
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –≤ session_state, –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
    if 'warning_count' not in st.session_state:
        st.session_state.warning_count = 0
    if 'critical_count' not in st.session_state:
        st.session_state.critical_count = 0
    if 'shown_alerts' not in st.session_state:
        st.session_state.shown_alerts = set()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
    for alert in critical_alerts:
        alert_id = f"{alert['device_id']}_{alert['timestamp']}"
        if alert_id not in st.session_state.shown_alerts:
            st.session_state.shown_alerts.add(alert_id)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º toast –¥–ª—è –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            st.toast(
                f"‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï: {SENSOR_TYPE_NAMES[alert['type']]} ({alert['device_id']}) - {alert['value']} {alert['unit']}",
                icon="‚õî"  # –ò–∫–æ–Ω–∫–∞ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            )
            
            # –¢–∞–∫–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            st.warning(f"‚õî –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –∞–Ω–æ–º–∞–ª–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞: {SENSOR_TYPE_NAMES[alert['type']]} ({alert['device_id']}) - {alert['value']} {alert['unit']}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
    for alert in warning_alerts:
        alert_id = f"{alert['device_id']}_{alert['timestamp']}"
        if alert_id not in st.session_state.shown_alerts:
            st.session_state.shown_alerts.add(alert_id)
            
            # –¢–æ–ª—å–∫–æ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
            st.toast(
                f"‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: {SENSOR_TYPE_NAMES[alert['type']]} ({alert['device_id']}) - {alert['value']} {alert['unit']}",
                icon="‚ö†Ô∏è"  # –ò–∫–æ–Ω–∫–∞ –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
    if len(critical_alerts) > st.session_state.critical_count:
        st.session_state.critical_count = len(critical_alerts)
    
    if len(warning_alerts) > st.session_state.warning_count:
        st.session_state.warning_count = len(warning_alerts)
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è (—á—Ç–æ–±—ã –Ω–µ —Ö—Ä–∞–Ω–∏—Ç—å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤)
    if len(st.session_state.shown_alerts) > 100:
        st.session_state.shown_alerts = set(list(st.session_state.shown_alerts)[-50:])

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    init_app_state()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫–µ—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–ª–æ–Ω–æ–∫
    col1, col2 = st.columns([1, 4])
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –≤ –ª–µ–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
    with col1:
        st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –°–µ–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        st.subheader("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
        auto_refresh = st.checkbox("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", value=True)
        
        refresh_interval = st.slider(
            "–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Å–µ–∫—É–Ω–¥—ã)", 
            min_value=5, 
            max_value=60, 
            value=REFRESH_INTERVAL,
            step=5
        )
        
        if st.button("–û–±–Ω–æ–≤–∏—Ç—å —Å–µ–π—á–∞—Å"):
            st.rerun()
        
        # –°–µ–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        st.subheader("–í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª")
        time_window = st.selectbox(
            "–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞:",
            options=[
                "–ü–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å", 
                "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 6 —á–∞—Å–æ–≤", 
                "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 12 —á–∞—Å–æ–≤",
                "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞", 
                "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π"
            ],
            index=0
        )
        
        # –°–µ–∫—Ü–∏—è –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ (—Å–∫—Ä—ã—Ç–∞ –≤ –¥–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏)
        # if st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", value=False):
        #    st.header("–¢–µ—Å—Ç–æ–≤–∞—è –∞–Ω–æ–º–∞–ª–∏—è")
        #    test_device = st.selectbox(
        #        "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ",
        #        options=[f"{sensor_type}_{i:02d}" for sensor_type in SENSOR_TYPE_NAMES.keys() for i in range(1, 4)]
        #    )
        #    
        #    test_value = st.number_input(
        #        "–ó–Ω–∞—á–µ–Ω–∏–µ",
        #        min_value=0.0,
        #        max_value=150.0,
        #        value=50.0,
        #        step=1.0
        #    )
        #    
        #    test_duration = st.slider(
        #        "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Å–µ–∫)",
        #        min_value=10,
        #        max_value=120,
        #        value=30,
        #        step=10
        #    )
        #    
        #    if st.button("–î–æ–±–∞–≤–∏—Ç—å –∞–Ω–æ–º–∞–ª–∏—é"):
        #        st.session_state.generator.add_manual_anomaly(test_device, test_value, test_duration)
        #        st.success(f"–ê–Ω–æ–º–∞–ª–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {test_device} –Ω–∞ {test_duration} —Å–µ–∫—É–Ω–¥")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        st.markdown("<hr>", unsafe_allow_html=True)
        st.markdown(f"**–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** {datetime.now().strftime('%H:%M:%S')}")
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –ø—Ä–∞–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
    with col2:
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
        st.markdown(
            """
            <h1 style='text-align: center;'>–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏–≥–Ω–∞–ª–æ–≤</h1>
            <p style='text-align: center;'>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑–∞–Ω–∏–π –¥–∞—Ç—á–∏–∫–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</p>
            <hr>
            """, 
            unsafe_allow_html=True
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        current_data = get_current_data()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞–Ω–æ–º–∞–ª–∏—è—Ö
        show_alert_notifications(current_data)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        tab1, tab2, tab3, tab4 = st.tabs(["–ü–∞–Ω–µ–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", "–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–û–ø–æ–≤–µ—â–µ–Ω–∏—è", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"])
        
        with tab1:
            render_dashboard(current_data)
        
        with tab2:
            render_device_details(time_window)
        
        with tab3:
            render_alerts(time_window)
        
        with tab4:
            render_settings()
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    if auto_refresh:
        time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
        st.rerun()

if __name__ == "__main__":
    main()
